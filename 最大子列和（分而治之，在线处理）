#求max(sum(a[i:j]))
#分而治之解决最大子列问题

import time
import random


#列表个数
n=10000
a=[0]*n
for i in range(n):
    a[i]=random.randint(0,9)-5


'''#1.(n*n*n)
start=time.time()
Max=a[0]
for i in range(n):
    for j in range(i,n):
        sum=0
        for k in range(i,j+1):
            sum=sum+a[k]
        if(sum>Max):
            Max=sum
end=time.time()
print('max:',Max,'time:',end-start)'''

#2.(n*n)
start=time.time()
Max=a[0]
for i in range(n):
    sum=0
    for j in range(i,n):
        sum=sum+a[j]
        if(sum>Max):
            Max=sum
end=time.time()
print('max:',Max,'time:',end-start)            


#3.分而治之（n*ln n)
start=time.time()
def lj(a,i,k,j):
    max1=0
    cxc1=k+1
    sum=0
    for ii in range(k,i-1,-1):
        sum=sum+a[ii]
        if(sum>max1):
            max1=sum
            cxc1=ii
    max2=0
    cxc2=k
    sum=0
    for ii in range(k+1,j+1):
        sum=sum+a[ii]
        if(sum>max2):
            max2=sum
            cxc2=ii
    return(cxc1,cxc2,max1+max2)
def cxc(a,i,j):
    if j==i:
        return [i,j,a[i]]
    b=cxc(a,i,int((i+j)/2))
    c=cxc(a,int((i+j)/2)+1,j)
    d=lj(a,b[0],int((i+j)/2),c[1])
    if(d[0]==int((i+j)/2+1) or d[1]==int((i+j)/2)):
        if(b[2]>c[2]):
            return b
        return c
    Max=max([b[2],c[2],d[2]])
    if(d[2]==Max):
        return d
    if(b[2]==Max):
        return b
    return c
Max=cxc(a,0,n-1)[2]    
end=time.time()
print('max:',Max,'time:',end-start)

#4.在线处理(n)
start=time.time()
Max=0
wmax=0
for i in a:
    wmax=wmax+i
    if(wmax>Max):
        Max=wmax
    elif(wmax<0):
        wmax=0
end=time.time()
print('max:',Max,'time:',end-start)

